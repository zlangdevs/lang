?? Advanced Zlang Example - Demonstrating All Compiler Features
?? This file showcases the full capabilities of the Zlang compiler

fun fibonacci(n: i32) >> i32 {
    i32 a = 0;
    i32 b = 1;
    i32 i = 0;

    @printf("Computing Fibonacci sequence up to %d terms:", n);

    while i < n {
        @printf("%d ", a);
        i32 temp = a;
        a = b;
        b = temp + b;
        i = i + 1;
    }

    return a;
}

fun factorial(n: i32) >> i32 {
    i32 result = 1;
    i32 i = 1;

    while i <= n {
        result = result * i;
        i = i + 1;
    }

    @printf("Factorial of %d is %d", n, result);
    return result;
}

fun string_demo() >> void {
    @printf("String demonstration:");
    @printf("Hello from Zlang! ðŸš€");
    @puts("This is using puts instead of printf");

    @printf("Nested function calls work too!");
    return;
}

fun variable_demo() >> i32 {
    @printf("Variable demonstration:");

    ?? Different variable declarations
    i32 initialized = 100;
    i32 uninitialized;

    ?? Assignment after declaration
    uninitialized = 200;

    ?? Using variables in expressions
    i32 sum = initialized + uninitialized;

    @printf("Initialized: %d", initialized);
    @printf("Uninitialized then set: %d", uninitialized);
    @printf("Sum: %d", sum);

    return sum;
}

fun math_operations() >> i32 {
    @printf("Math operations demonstration:");

    i32 a = 15;
    i32 b = 7;

    i32 addition = a + b;
    i32 subtraction = a - b;

    @printf("a = %d, b = %d", a, b);
    @printf("a + b = %d", addition);
    @printf("a - b = %d", subtraction);

    return addition * subtraction;
}

fun function_call_chain() >> i32 {
    @printf("Function call chain demonstration:");

    i32 var_result = variable_demo();
    i32 math_result = math_operations();

    @printf("Variable demo result: %d", var_result);
    @printf("Math operations result: %d", math_result);

    return var_result + math_result;
}

fun complex_expressions() >> i32 {
    @printf("Complex expressions demonstration:");

    i32 x = 5;
    i32 y = 10;
    i32 z = 3;

    ?? Complex nested expressions
    i32 complex = x + y * z;
    i32 another = (x + y) - z;

    @printf("x = %d, y = %d, z = %d", x, y, z);
    @printf("x + y * z = %d", complex);
    @printf("(x + y) - z = %d", another);

    return complex + another;
}

fun return_variations() >> i32 {
    @printf("Return variations demonstration:");

    i32 condition = 1;

    if condition == 1 {
        @printf("Returning early with value 42");
        return 42;
    }

    @printf("This should not be reached");
    return 0;
}

fun void_function_demo() >> void {
    @printf("Void function demonstration - no return value");
    @puts("This function returns void");

    ?? Void return
    return;
}

fun libc_functions_demo() >> void {
    @printf("LibC functions demonstration:");

    ?? Different ways to use printf
    @printf("Simple string");
    @printf("Number: %d", 123);
    @printf("Multiple numbers: %d, %d, %d", 1, 2, 3);

    ?? Using puts
    @puts("This is puts - automatically adds newline");
    @puts("Another puts call");

    return;
}

fun main() >> i32 {
    @printf("ðŸš€ Welcome to Advanced Zlang Demonstration!");
    @printf("============================================");

    ?? Call various demonstration functions
    string_demo();
    @printf("---");

    i32 chain_result = function_call_chain();
    @printf("Chain result: %d", chain_result);
    @printf("---");

    i32 complex_result = complex_expressions();
    @printf("Complex expressions result: %d", complex_result);
    @printf("---");

    i32 return_result = return_variations();
    @printf("Return variations result: %d", return_result);
    @printf("---");

    void_function_demo();
    @printf("---");

    libc_functions_demo();
    @printf("---");

    ?? Recursive function calls
    i32 fib_result = fibonacci(8);
    @printf("Fibonacci result: %d", fib_result);
    @printf("---");

    i32 fact_result = factorial(5);
    @printf("Factorial result: %d", fact_result);
    @printf("---");

    ?? Final calculations
    i32 final_result = chain_result + complex_result + return_result + fib_result + fact_result;

    @printf("============================================");
    @printf("ðŸŽ‰ Advanced demonstration complete!");
    @printf("Final combined result: %d", final_result);
    @printf("All compiler features tested successfully!");

    return final_result;
}
